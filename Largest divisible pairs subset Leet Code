class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int l=nums.size();
        if(l==0)
        {
            vector<int> ve;
            return ve;
        }
        int p[l+1];
        int dp[l+1],o=0,in=0;
        pair<int,int> g;
        for(int i=l-1;i>=0;i--)
        {   dp[i]=1;
            p[i]=i;
            for(int j=i+1;j<l;j++)
            {
              if(nums[j]%nums[i]==0)
              {
                  if(dp[j]+1>dp[i])
                  {
                      dp[i]=dp[j]+1;
                      p[i]=j;
                  }
              }
            }
            if(o<dp[i])
            {
                o=dp[i];
                in=i;
            }
        }
        vector<int> v;
        v.push_back(nums[in]);
      while(p[in]!=in)
      {
          v.push_back(nums[p[in]]);
          in=p[in];
      }
      return v;
    }
};
