
// Binary Search

class Solution {
public:
    int splitArray(vector<int>& nums, int m) {
        long long l=*max_element(nums.begin(),nums.end()),r=0,mid;
        for(int i=0;i<nums.size();i++)
            r+=nums[i];
        while(l<r)
        {
            mid=l+(r-l)/2;
            if(fu(nums,m,mid))
                r=mid;
            else
                l=mid+1;

        }
     return r;
    }
    private: bool fu(vector<int>& nums, int m,int mid)
    { long long su=0,x=1;
        for(int i=0;i<nums.size();i++)
        {
            su+=nums[i];
            if(su>mid)
            {su=nums[i];
             x++;
            }
            if(x>m)
                return false;
        }
     return true;
    }
};
// Another approach
// DP

public int splitArrayII(int[] nums, int m) {
    int n = nums.length;
    int[] S = new int[n + 1];
    S[0] = 0;
    for (int i = 1; i <= n; ++i)
        S[i] = S[i - 1] + nums[i - 1];

    int[][] dp = new int[m + 1][n + 1];
    for (int i = 0; i <= m; ++i)
        for (int j = 0; j <= n; ++j)
            dp[i][j] = Integer.MAX_VALUE;

    dp[0][0] = 0;
    for (int i = 1; i <= m; ++i)
        for (int j = 1; j <= n; ++j)
            for (int k = 0; k < j; ++k)
                dp[i][j] = Math.min(dp[i][j], Math.max(S[j] - S[k], dp[i - 1][k]));

    return dp[m][n];
}
